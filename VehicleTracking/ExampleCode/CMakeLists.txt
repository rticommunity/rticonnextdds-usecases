# (c) 2021 Copyright, Real-Time Innovations, Inc. All rights reserved.
# No duplications, whole or partial, manual or electronic, may be made
# without express written permission.  Any such copies, or revisions thereof,
# must display this notice unaltered.
# This code contains trade secrets of Real-Time Innovations, Inc.
cmake_minimum_required(VERSION 3.11)
project(rticonnextdds-usecases-vehicle-tracking)
set(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    "${CMAKE_CURRENT_SOURCE_DIR}/resource/cmake"
)

# Find the RTI Connext DDS libraries
if(NOT RTIConnextDDS_FOUND)
    find_package(RTIConnextDDS
        "6.0.1"
        REQUIRED
        COMPONENTS
            core
    )
endif()

include(CMakeParseArguments)
include(ConnextDdsArgumentChecks)
include(ConnextDdsCodegen)

if (UNIX)
set(CMAKE_C_COMPILER "gcc")
set(CMAKE_CXX_COMPILER "g++")
endif(UNIX)



function(connextdds_add)
    set(optional_args)
    set(single_value_args IDL )
    set(multi_value_args APPLICATION_NAMES )
    cmake_parse_arguments(_CONNEXT
        "${optional_args}"
        "${single_value_args}"
        "${multi_value_args}"
        ${ARGN}
    )
    connextdds_check_required_arguments(
        _CONNEXT_IDL
	_CONNEXT_APPLICATION_NAMES
    )

    # First, we call Codegen to generate the header and source files from the
    # IDL
    set(codegen_args)
    
    # The name of the example folder name is used as prefix
    get_filename_component(
         folder_name
         "${CMAKE_CURRENT_SOURCE_DIR}"
         DIRECTORY)
     get_filename_component(
         folder_name
         "${folder_name}"
         NAME)
     set(prefix "${folder_name}")

     # Generate the sources for the types
    connextdds_call_codegen(
        IDL "${_CONNEXT_IDL}"
        IDL_REL_DIR "./src/Idl"
	"C++11"
	OUTPUT_DIRECTORY "src/Generated"
        PREFIX "${prefix}"
        ${codegen_args}
    )

    # We will use source code provided to build applications
    # in the repository for the application names specified
    connextdds_sanitize_language(LANG "C++11" VAR lang_var)

    foreach(_APPLICATION_NAME ${_CONNEXT_APPLICATION_NAMES})
	AUX_SOURCE_DIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/src/${_APPLICATION_NAME}" ${_APPLICATION_NAME}_src)

	set (resource_files "")
	if (("${_APPLICATION_NAME}" STREQUAL "TrackGui") AND (WIN32))
	    set(resource_files "${CMAKE_CURRENT_SOURCE_DIR}/resource/gui/TrackGuiApp.rc" "${CMAKE_CURRENT_SOURCE_DIR}/resource/gui/resource.h")
        endif()

	# Add the target for the publisher application
        connextdds_add_application(
            TARGET "${_APPLICATION_NAME}"
            SOURCES ${${_APPLICATION_NAME}_src}
            OUTPUT_NAME "${_APPLICATION_NAME}"
	    SOURCES
	        $<TARGET_OBJECTS:${prefix}_obj>
	        "${${_APPLICATION_NAME}_src}"
${resource_files}
        )

    endforeach(_APPLICATION_NAME)
endfunction()


function(connextdds_call_codegen)
    set(optional_args)
    set(single_value_args IDL IDL_REL_DIR PREFIX)
    set(multi_value_args CODEGEN_ARGS)
    cmake_parse_arguments(_CONNEXT
        "${optional_args}"
        "${single_value_args}"
        "${multi_value_args}"
        ${ARGN}
    )
    connextdds_check_required_arguments(
        _CONNEXT_IDL
    )

    # Get the list of the source files to generate and configure the command
    # to call Codegen
    connextdds_rtiddsgen_run(
        IDL_FILE
            "${CMAKE_CURRENT_SOURCE_DIR}/${_CONNEXT_IDL_REL_DIR}/${_CONNEXT_IDL}.idl"
        OUTPUT_DIRECTORY
            "${CMAKE_CURRENT_SOURCE_DIR}/src/Generated"
	    LANG "C++11"
        ${_CONNEXT_CODEGEN_ARGS}
    )

    # Get the path to the generated publisher and subscriber source code
    connextdds_sanitize_language(LANG "C++11" VAR lang_var)
    

    # This will help to ensure that all the files generated by codegen are
    # created
    add_custom_target(${_CONNEXT_PREFIX}_sources
        DEPENDS
            ${${_CONNEXT_IDL}_GENERATED_SOURCES}
    )

    set(obj_library ${_CONNEXT_PREFIX}_obj)
    add_library(${obj_library}
        OBJECT
        ${${_CONNEXT_IDL}_${lang_var}_SOURCES}
    )

    set(api "cpp2")

    target_compile_definitions(
        ${obj_library}
        PRIVATE
        $<TARGET_PROPERTY:RTIConnextDDS::cpp2_api,INTERFACE_COMPILE_DEFINITIONS>)

    target_include_directories(
        ${obj_library}
        PRIVATE
        $<TARGET_PROPERTY:RTIConnextDDS::cpp2_api,INTERFACE_INCLUDE_DIRECTORIES>)

    add_dependencies(${obj_library}
	    #        ${_CONNEXT_PREFIX}_${lang_var}_sources
        ${_CONNEXT_PREFIX}_sources
    )

endfunction()


function(connextdds_add_application)
    set(optional_args )
    set(single_value_args TARGET OUTPUT_NAME )
    set(multi_value_args SOURCES )

    cmake_parse_arguments(_CONNEXT
        "${optional_args}"
        "${single_value_args}"
        "${multi_value_args}"
        ${ARGN}
    )
    connextdds_check_required_arguments(
        _CONNEXT_TARGET
        _CONNEXT_SOURCES
     )

    set(api "C++11")
        set(target_name "${_CONNEXT_TARGET}")  #_${api}")
        set(qos_target "qos_${api}")
        set(qos_prefix "${api}")
        set(script_prefix "${api}")

    # Create the target
    add_executable(${target_name} ${_CONNEXT_SOURCES})

    # Link all the dependencies and the RTI libraries for the API language
    target_link_libraries(${target_name}
        PRIVATE
            ${_CONNEXT_DEPENDENCIES}
	    RTIConnextDDS::cpp2_api
    )

    # Add the include directories
    target_include_directories(${target_name}
        PRIVATE
            "${CMAKE_CURRENT_BINARY_DIR}/src"
    )

    if ("${_CONNEXT_TARGET}" STREQUAL "TrackGui")

        if (UNIX)
            target_link_libraries(${target_name}
                PRIVATE
                    ${_CONNEXT_DEPENDENCIES}
		    RTIConnextDDS::cpp2_api
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/proj-5.2/Linux/lib/x64Linux4gcc7.3.0/libproj.a"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/shapelib-1.5.0/Linux/lib/libshp.so"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/lib/x64Linux4gcc7.3.0/libwx_gtk2u_xrc-3.1.so"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/lib/x64Linux4gcc7.3.0/libwx_gtk2u_html-3.1.so"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/lib/x64Linux4gcc7.3.0/libwx_gtk2u_qa-3.1.so"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/lib/x64Linux4gcc7.3.0/libwx_gtk2u_adv-3.1.so"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/lib/x64Linux4gcc7.3.0/libwx_gtk2u_core-3.1.so"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/lib/x64Linux4gcc7.3.0/libwx_baseu_xml-3.1.so"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/lib/x64Linux4gcc7.3.0/libwx_baseu_net-3.1.so"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/lib/x64Linux4gcc7.3.0/libwx_baseu-3.1.so"
	    )
            add_definitions("-m64 -Wall -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ -DRTI_UNIX -DRTI_LINUX -static-libgcc")
            set(platform "Linux")
            target_include_directories(${target_name}
                PRIVATE
                    "${CMAKE_CURRENT_SOURCE_DIR}/src"
 		    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/shapelib-1.5.0/Linux/include"
		    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/include"
		    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/Linux/include/gtk2-unicode-3.1"
		    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/proj-5.2/Linux/include"
            )

        endif(UNIX)
	if (WIN32)
	    if ("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
                set(platform "Win64")
	        set(dll_lib "Win64/lib/vc_x64_dll")
	    else()
                set(platform "Win32")
	        set(dll_lib "Win32/lib/vc_dll")
	    endif()	
	    target_link_directories(${target_name} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/${dll_lib}")
	    target_link_libraries(${target_name}
                PRIVATE
                    ${_CONNEXT_DEPENDENCIES}
	            RTIConnextDDS::cpp2_api
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/proj-5.2/${platform}/lib/proj_5_2.lib"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/shapelib-1.5.0/${platform}/lib/shapelib.lib"
                    debug "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/${dll_lib}/wxbase31ud.lib"
                    debug "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/${dll_lib}/wxmsw31ud_core.lib"
                    optimized "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/${dll_lib}/wxbase31u.lib"
                    optimized "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/${dll_lib}/wxmsw31u_core.lib"
            )

            add_definitions(-DwxUSE_GUI=1 -DWXUSINGDLL=1 -D__WXMSW__ -D_UNICODE -D_CRT_SECURE_NO_WARNINGS)

	    target_link_options(${target_name} PRIVATE "/SUBSYSTEM:WINDOWS")

	    target_include_directories(${target_name}
                PRIVATE
                    "${CMAKE_CURRENT_SOURCE_DIR}/src"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/shapelib-1.5.0/${platform}/include"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/${platform}/include"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/wxWidgets-3.1.2/${platform}/include/msvc"
                    "${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/proj-5.2/${platform}/include"
            )

        endif(WIN32)

    endif()

    # Set output name for the binary
    set_target_properties(${target_name}
        PROPERTIES
            OUTPUT_NAME "${_CONNEXT_OUTPUT_NAME}"
            ${cxx_standard}
    )

endfunction()


connextdds_add(
    IDL "AirTrafficControl"
    APPLICATION_NAMES
        "FlightPlanGenerator"
        "RadarGenerator"
	"TrackGui"
)


