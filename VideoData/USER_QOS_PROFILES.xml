<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://community.rti.com/schema/current/rti_dds_qos_profiles.xsd">

    <qos_library name="TransportLibrary">
    
        <qos_profile name="SHMEM" base_name="BuiltinQosLib::Generic.Common">
            <domain_participant_qos>
                <!-- Optimizations for the the SHMEM transport. -->
                <transport_builtin>
                    <mask>SHMEM</mask>
                    <shmem>
                        <!-- maximum size of a frame. You can check average size of messages by using print-frame-size=1 -->
                        <message_size_max>300000</message_size_max>
                        <received_message_count_max>10</received_message_count_max>
                        <!-- message_size_max * received_message_count_max -->
                        <receive_buffer_size>3000000</receive_buffer_size>
                    </shmem>
                </transport_builtin>
            </domain_participant_qos>
        </qos_profile>

        <qos_profile name="Loopback" base_name="BuiltinQosLib::Generic.Common">
            <domain_participant_qos>
                <transport_builtin>
                    <mask>UDPv4</mask>
                    <udpv4>
                        <!-- This avois sending / receiving duplicate traffic in most cases -->
                        <allow_interfaces_list>
                            <element>127.0.0.1</element>
                        </allow_interfaces_list>
                        <!-- This helps not to lose packets. Run source buffer_script.sh first -->
                        <send_socket_buffer_size>5000000</send_socket_buffer_size>
                        <recv_socket_buffer_size>5000000</recv_socket_buffer_size>
                    </udpv4>
                </transport_builtin>
            </domain_participant_qos>
        </qos_profile>

        <qos_profile name="LAN" base_name="BuiltinQosLib::Generic.Common">
            <domain_participant_qos>
                <transport_builtin>
                    <mask>UDPv4</mask>
                    <udpv4>
                        <!-- This avois sending / receiving duplicate traffic in most cases -->
                        <allow_interfaces_list>
                            <element>$(ALLOW_INTERFACES_LIST)</element>
                        </allow_interfaces_list>
                        <!-- This helps not to lose packets. Run source buffer_script.sh first -->
                        <send_socket_buffer_size>5000000</send_socket_buffer_size>
                        <recv_socket_buffer_size>5000000</recv_socket_buffer_size>
                    </udpv4>
                </transport_builtin>
            </domain_participant_qos>
        </qos_profile>

        <qos_profile name="LAN_NoIpFrag" base_name="BuiltinQosLib::Generic.Common">
            <domain_participant_qos>
                <transport_builtin>
                    <mask>UDPv4</mask>
                    <udpv4>
                        <!-- This avois sending / receiving duplicate traffic in most cases -->
                        <allow_interfaces_list>
                            <element>$(ALLOW_INTERFACES_LIST)</element>
                        </allow_interfaces_list>
                        <!-- Avoid IP fragmentation -->
                        <message_size_max>1400</message_size_max>
                    </udpv4>
                </transport_builtin>
            </domain_participant_qos>
        </qos_profile>

        <qos_profile name="SHMEM+LAN" base_name="BuiltinQosLib::Generic.Common">
            <domain_participant_qos>
                <!-- Optimizations for the the SHMEM transport. -->
                <transport_builtin>
                    <mask>UDPv4 | SHMEM</mask>
                    <shmem>
                        <!-- maximum size of a frame. You can check average size of messages by using print-frame-size=1 -->
                        <message_size_max>300000</message_size_max>
                        <received_message_count_max>10</received_message_count_max>
                        <!-- message_size_max * received_message_count_max -->
                        <receive_buffer_size>3000000</receive_buffer_size>
                    </shmem>
                    <udpv4>
                        <!-- This avois sending / receiving duplicate traffic in most cases -->
                        <allow_interfaces_list>
                            <element>$(ALLOW_INTERFACES_LIST)</element>
                        </allow_interfaces_list>
                        <!-- This helps not to lose packets. Run source buffer_script.sh first -->
                        <send_socket_buffer_size>5000000</send_socket_buffer_size>
                        <recv_socket_buffer_size>5000000</recv_socket_buffer_size>
                    </udpv4>
                </transport_builtin>
            </domain_participant_qos>
        </qos_profile>

        <qos_profile name="WAN_Active" base_name="BuiltinQosLib::Generic.Common">
            <domain_participant_qos>
                <transport_builtin>
                    <mask>UDPv4_WAN</mask>
                    <udpv4_wan>
                        <message_size_max>1400</message_size_max>
                        <!-- This avois sending / receiving duplicate traffic in most cases -->
                        <allow_interfaces_list>
                            <element>$(ALLOW_INTERFACES_LIST)</element>
                        </allow_interfaces_list>
                        <!-- This helps not to lose packets. Run source buffer_script.sh first -->
                        <send_socket_buffer_size>5000000</send_socket_buffer_size>
                        <recv_socket_buffer_size>5000000</recv_socket_buffer_size>
                    </udpv4_wan>
                </transport_builtin>
                <discovery>
                    <initial_peers>
                        <!-- Public IP address and public port of the remote DP -->
                        <element>$(WAN_INITIAL_PEER)</element>
                    </initial_peers>
                </discovery>
                <discovery_config>
                    <participant_liveliness_assert_period>
                        <sec>1</sec>
                        <nanosec>0</nanosec>
                    </participant_liveliness_assert_period>
                </discovery_config>
            </domain_participant_qos>
        </qos_profile>

        <qos_profile name="WAN_Passive" base_name="BuiltinQosLib::Generic.Common">
            <domain_participant_qos>
                <transport_builtin>
                    <mask>UDPv4_WAN</mask>
                    <udpv4_wan>
                        <!-- Public IP address of this DP -->
                        <public_address>$(PUBLIC_ADDRESS)</public_address>
                        <comm_ports>
                            <default>
                                <!-- Public port of this DP -->
                                <public>$(PUBLIC_PORT)</public>
                                <!-- Internal port of this DP, may be equal to PUBLIC_PORT -->
                                <host>$(INTERNAL_PORT)</host>
                            </default>
                        </comm_ports>
                        <message_size_max>1400</message_size_max>
                        <!-- This helps not to lose packets. Run source buffer_script.sh first -->
                        <send_socket_buffer_size>5000000</send_socket_buffer_size>
                        <recv_socket_buffer_size>5000000</recv_socket_buffer_size>
                    </udpv4_wan>
                </transport_builtin>
            </domain_participant_qos>
        </qos_profile>
    </qos_library>

    <qos_library name="DataFlowLibrary">

        <qos_profile name="Reliable" base_name="BuiltinQosLib::Generic.Common">

            <datawriter_qos>
                <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                </publish_mode>
                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>
                <history>
                    <kind>KEEP_LAST_HISTORY_QOS</kind>
                    <depth>10</depth>
                </history>
                <protocol>
                    <disable_positive_acks>true</disable_positive_acks>
                    <rtps_reliable_writer>
                      <max_send_window_size>40</max_send_window_size>
                      <min_send_window_size>40</min_send_window_size>
                      <heartbeats_per_max_samples>40</heartbeats_per_max_samples>
                      <max_nack_response_delay>
                        <sec>0</sec>
                        <nanosec>0</nanosec>
                      </max_nack_response_delay>
                      <disable_positive_acks_min_sample_keep_duration>
                        <sec>1</sec>
                        <nanosec>0</nanosec>
                      </disable_positive_acks_min_sample_keep_duration>
                      <disable_positive_acks_max_sample_keep_duration>
                        <sec>1</sec>
                        <nanosec>0</nanosec>
                      </disable_positive_acks_max_sample_keep_duration>
                    </rtps_reliable_writer>
                  </protocol>
            </datawriter_qos>
            <datareader_qos>
                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>
                <protocol>
                    <disable_positive_acks>true</disable_positive_acks>
                    <rtps_reliable_reader>
                        <receive_window_size>10</receive_window_size>
                        <min_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </min_heartbeat_response_delay>
                        <max_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_heartbeat_response_delay>
                    </rtps_reliable_reader>
                </protocol>
                <history>
                    <kind>KEEP_LAST_HISTORY_QOS</kind>
                    <depth>10</depth>
                </history>
            </datareader_qos>
        </qos_profile>

        <qos_profile name="BestEffort" base_name="BuiltinQosLib::Generic.Common">
            <datawriter_qos>
                <reliability>
                    <kind>BEST_EFFORT_RELIABILITY_QOS</kind>
                </reliability>
            </datawriter_qos>
            <datareader_qos>
                <reliability>
                    <kind>BEST_EFFORT_RELIABILITY_QOS</kind>
                </reliability>
                <history>
                    <kind>KEEP_LAST_HISTORY_QOS</kind>
                    <depth>10</depth>
                </history>
            </datareader_qos>
        </qos_profile>
    </qos_library>
</dds>