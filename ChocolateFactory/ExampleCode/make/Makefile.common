###############################################################################
##         (c) Copyright, Real-Time Innovations, All rights reserved.        ##
##                                                                           ##
##         Permission to modify and use for internal purposes granted.       ##
## This software is provided "as is", without warranty, express or implied.  ##
##                                                                           ##
###############################################################################

# This Makefile contains the common rules to build for all the architectures.
# It is included from the architecture-specific Makefile.
# This Makefile requires the following variables:
# - ARCH: Architecture to build (for example x64Linux3gcc5.4.0)
#
# Optional variables:
# - DEBUG: If set to '1', it turns on debugging information
# - SHAREDLIB: If set to '1', shared libraries will be used
# - CXX: compiler name.
# - CXXFLAGS: compiler flags: will be appended to $CXX command-line
# - CXXLD: linker name.
# - CXXLDFLAGS: linker flags: will be inserted at the beginning of CXXLD cmdline
# - SYSLIBS: additional system libraries to append to the CXXLD command-line

###############################################################################
# Ensure this Makefile is invoked with the right variable set
###############################################################################
ifeq ($(ARCH), )
all:
	@echo "***************************************************************"
	@echo "You cannot use this Makefile directly, instead use the"
	@echo "architecture-specific Makefile. For example:"
	@echo "         gmake -f make/Makefile.x64Linux3gcc5.4.0"
	@echo "***************************************************************"
	@false
else
###############################################################################
# Ensure $NDDSHOME is defined
###############################################################################
ifeq ($(NDDSHOME), )
all:
	@echo "***************************************************************"
	@echo "The environment variable 'NDDSHOME' is not set!"
	@echo "To use this makefile you need to set NDDSHOME to the directory"
	@echo "where you have RTI Connext installed."
	@echo "***************************************************************"
	@false
endif
endif


# Define the sources and NDDS search path
INCLUDES = -Isrc/CommonInfrastructure -Isrc/Generated -I$(NDDSHOME)/include \
           -I$(NDDSHOME)/include/ndds 

###############################################################################
# Modify build flags for debug/release
###############################################################################
ifeq ($(DEBUG),1)
CXXFLAGS += -g -O0
ifeq ($(SHAREDLIB),1)
NDDSLIBS = -lnddscppd -lnddscd -lnddscored
else
NDDSLIBS = -lnddscppzd -lnddsczd -lnddscorezd
endif
else
CXXFLAGS += -O2
ifeq ($(SHAREDLIB),1)
NDDSLIBS = -lnddscpp -lnddsc -lnddscore
else
NDDSLIBS = -lnddscppz -lnddscz -lnddscorez
endif
endif

LIBS = -L$(NDDSHOME)/lib/$(ARCH) $(NDDSLIBS) $(SYSLIBS)
STATION_CONTROLLERLIBS = $(LIBS)  

COMMONSRC = src/CommonInfrastructure/DDSCommunicator.cxx     \
          src/CommonInfrastructure/OSAPI.cxx               \
          src/CommonInfrastructure/ChocolateLotStateEntities.cxx \
          src/CommonInfrastructure/EnumPrintHelpers.cxx \

COMMON_H  = src/CommonInfrastructure/DDSCommunicator.h \
          src/CommonInfrastructure/OSAPI.h               \
          src/CommonInfrastructure/DDSTypeWrapper.h       \
          src/CommonInfrastructure/ChocolateLotStateEntities.h       \
          src/CommonInfrastructure/EnumPrintHelpers.h       \

SOURCES_IDL = src/Generated/ChocolateFactory.cxx    \
          src/Generated/ChocolateFactoryPlugin.cxx  \
          src/Generated/ChocolateFactorySupport.cxx

MESSRC = src/ManufacturingExecutionSystem/MESInterface.cxx \
            src/ManufacturingExecutionSystem/ManufacturingExecutionSystem.cxx

RECIPESRC  = src/RecipeGenerator/RecipePublisherInterface.cxx \
            src/RecipeGenerator/RecipeGenerator.cxx

STATION_CONTROLLERSRC    = src/StationControllerInterface.cxx \
            src/StationController.cxx 

HEADERS_IDL = src/Generated/ChocolateFactory.h      \
          src/Generated/ChocolateFactoryPlugin.h    \
          src/Generated/ChocolateFactorySupport.h

DIRECTORIES   = objs.dir objs/$(ARCH).dir objs/$(ARCH)/ManufacturingExecutionSystem.dir \
                objs/$(ARCH)/RecipeGenerator.dir objs/$(ARCH)/StationController.dir \
                objs/$(ARCH)/Common.dir
SOURCES_NODIR = $(notdir $(COMMONSRC)) $(notdir $(SOURCES_IDL))
COMMONOBJS    = $(SOURCES_NODIR:%.cxx=objs/$(ARCH)/Common/%.o)
EXEC          = ManufacturingExecutionSystem 

MESSRC_NODIR = $(notdir $(MESSRC))
MESOBJS    = $(MESSRC_NODIR:%.cxx=objs/$(ARCH)/ManufacturingExecutionSystem/%.o) $(COMMONOBJS)

RECIPESRC_NODIR = $(notdir $(RECIPESRC))
RECIPEOBJS      = $(RECIPESRC_NODIR:%.cxx=objs/$(ARCH)/RecipeGenerator/%.o) $(COMMONOBJS)
RECIPEEXEC      = RecipeGenerator

STATION_CONTROLLERSRC_NODIR = $(notdir $(STATION_CONTROLLERSRC))
STATION_CONTROLLEROBJS      = $(STATION_CONTROLLERSRC_NODIR:%.cxx=objs/$(ARCH)/StationController/%.o) $(COMMONOBJS)
STATION_CONTROLLEREXEC      = StationController

###############################################################################
# Build Rules
###############################################################################
$(ARCH): ManufacturingExecutionSystem RecipeGenerator StationController 

ManufacturingExecutionSystem: $(DIRECTORIES) $(MESOBJS) $(EXEC:%=objs/$(ARCH)/ManufacturingExecutionSystem/%.o) \
	$(EXEC:%=objs/$(ARCH)/ManufacturingExecutionSystem/%.out)

RecipeGenerator: $(RECIPEOBJS) $(@:%=objs/$(ARCH)/RecipeGenerator/%.o) \
	 $(RECIPEEXEC:%=objs/$(ARCH)/RecipeGenerator/%.out)

StationController: $(STATION_CONTROLLEROBJS) $(@:%=objs/$(ARCH)/StationController/%.o) \
	 $(STATION_CONTROLLEREXEC:%=objs/$(ARCH)/StationController/%.out)

# Building the manufacturing execution system application
objs/$(ARCH)/ManufacturingExecutionSystem/%.out: objs/$(ARCH)/ManufacturingExecutionSystem/%.o
	$(CXXLD) $(CXXLDFLAGS) -o $(@:%.out=%) $(MESOBJS) $(LIBS)

# Building the recipe generator application
objs/$(ARCH)/RecipeGenerator/%.out: objs/$(ARCH)/RecipeGenerator/%.o
	$(CXXLD) $(CXXLDFLAGS) -o $(@:%.out=%) $(RECIPEOBJS) $(LIBS)

# Building the station controller application
objs/$(ARCH)/StationController/%.out: objs/$(ARCH)/StationController/%.o
	$(CXXLD) $(CXXLDFLAGS) -o $(@:%.out=%) $(STATION_CONTROLLEROBJS) $(STATION_CONTROLLERLIBS)


objs/$(ARCH)/Common/%.o: src/CommonInfrastructure/%.cxx $(COMMON_H)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<
	
objs/$(ARCH)/Common/%.o: src/Generated/%.cxx $(COMMON_H)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

objs/$(ARCH)/ManufacturingExecutionSystem/%.o: src/ManufacturingExecutionSystem/%.cxx $(COMMON_H) $(HEADERS_IDL)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

objs/$(ARCH)/RecipeGenerator/%.o: src/RecipeGenerator/%.cxx $(COMMON_H)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

objs/$(ARCH)/StationController/%.o: src/StationController/%.cxx $(COMMON_H)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

# Rule to rebuild the generated files when the .idl file change
$(SOURCES_IDL) $(HEADERS_IDL): src/Idl/ChocolateFactory.idl
	@mkdir -p src/Generated
ifeq ($(OS_ARCH), i86Win32)
	call $(NDDSHOME)/bin/rtiddsgen.bat -d src/idl src/ChocolateFactory.idl -replace -language C++
else
	$(NDDSHOME)/bin/rtiddsgen -namespace -d src/Generated src/Idl/ChocolateFactory.idl -replace -language C++
endif

generate: $(SOURCES_IDL) $(HEADERS_IDL)

# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory $*"
	@if [ ! -d $* ]; then \
		echo "Making directory $*"; \
		mkdir -p $* ; \
	fi;

###############################################################################
# Clean target: removes the objs dir
###############################################################################
clean:
	@rm -Rf objs/$(ARCH)
	@echo "Successfully deleted object and executable files for architecture $(ARCH)"
	@echo "To delete ALL the architectures and any generated file use target 'veryclean'"

veryclean:
	@rm -Rf objs
	@rm -Rf src/idl
	@echo "Deleted all executables, objects and generated files"
