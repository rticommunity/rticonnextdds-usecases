<?xml version="1.0"?>
<!--
(c) 2021 Copyright, Real-Time Innovations, Inc. (RTI) All rights reserved.

RTI grants Licensee a license to use, modify, compile, and create derivative
works of the software solely for use with RTI Connext DDS.  Licensee may
redistribute copies of the software provided that all such copies are
subject to this license. The software is provided "as is", with no warranty
of any type, including any warranty for fitness for any purpose. RTI is
under no obligation to maintain or support the software.  RTI shall not be
liable for any incidental or consequential damages arising out of the use or
inability to use the software.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Description:
XML QoS Profile for Factory data

For more information about XML QoS Profiles see Chapter 15 in the
RTI Connext user manual.
-->

<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/6.1.0/rti_dds_qos_profiles.xsd">
    <!-- QoS Library containing the QoS profile used in the example.
        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="RTIExampleQosLibrary">
        <qos_profile name="FactoryStateData" base_name="BuiltinQosLib::Generic.KeepLastReliable.TransientLocal">
            <base_name>
                <element>RTIExampleQosLibrary::OneToManyMulticast</element>
            </base_name>
            <participant_qos>
                <participant_name>
                    <name>Chocolate Factory Application</name>
                </participant_name>
            </participant_qos>
            <!-- QoS used to configure the data writer created in the example code -->
            <datawriter_qos>
                <!-- Resource limits: to allow the application to specify
                       a different number of maximum updates that can be
                       handled at once, the resource limits are being set
                       in code. -->
                <!--<resource_limits>
                    <max_samples>128</max_samples>
                    <max_instances>64</max_instances>
                    <max_samples_per_instance>2</max_samples_per_instance>
                  </resource_limits>-->

                <!-- Tuning the reliability protocol for faster reliable
                     data repairs (at the expense of bandwidth). -->
                <protocol>
                    <rtps_reliable_writer>
                        <!-- Send reliability heartbeats every 50 ms if there is
                             a reader waiting for data.  Send reliability heart-
                             beats every 10 ms if the queue is starting to fill
                             and there is a reader waiting for data. (Note that
                             no heartbeats are sent if there are no readers
                             waiting for data).  These heartbeats determine how
                             quickly data is re-sent if it was lost the first
                             time. -->
                        <heartbeat_period>
                            <sec>0</sec>
                            <nanosec>50000000</nanosec>
                        </heartbeat_period>
                        <fast_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>10000000</nanosec>
                        </fast_heartbeat_period>
                        <late_joiner_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>50000000</nanosec>
                        </late_joiner_heartbeat_period>
                        <!-- Does not change behavior in a system with no
                             multicast.  However, if somebody does enable
                             multicast on a DataReader, this will prevent
                             potential delays. -->
                        <enable_multicast_periodic_heartbeat>true</enable_multicast_periodic_heartbeat>
                    </rtps_reliable_writer>
                </protocol>
            </datawriter_qos>
            <!-- QoS used to configure the data reader created in the example code -->
            <datareader_qos>
                <!-- Resource limits: to allow the application to specify
                       a different number of maximum updates that can be
                       handled at once, the resource limits are being set
                       in code. -->
                <!--<resource_limits>
                    <max_samples>128</max_samples>
                    <max_instances>64</max_instances>
                    <max_samples_per_instance>2</max_samples_per_instance>
                  </resource_limits>-->
            </datareader_qos>
        </qos_profile>
    </qos_library>
</dds>
