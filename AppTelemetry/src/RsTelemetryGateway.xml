<?xml version="1.0"?>
<!--
 (c) 2025 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 -->

<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://community.rti.com/schema/current/rti_routing_service.xsd">

    <configuration_variables>
        <value>
            <element>
                <name>SCRAPE_URL</name>
                <value>0.0.0.0:9464</value>
            </element>
            <element>
                <name>EXPORT_DEBUG</name>
                <value>true</value> 
            </element>
        </value>
    </configuration_variables>

    <plugin_library name="AdapterLib">
        <adapter_plugin name="OpenTelemetryAdapter">
            <dll>oteladapter</dll>
            <create_function>OpenTelemetryAdapter_create_adapter_plugin</create_function>
        </adapter_plugin>
    </plugin_library>

    <routing_service name="OpenTelemetryGateway">
        <domain_route name="DDSOtel">
            <!-- Define the url exposed for Prometheus to scrape from -->
            <connection name="OpenTelemetryConnection" plugin_name="AdapterLib::OpenTelemetryAdapter">
                <property>
                    <value>
                        <element>
                            <name>Prometheus.scrape_url</name>
                            <value>$(SCRAPE_URL)</value>
                        </element>
                        <element>
                            <name>OpenTelemetry.debug</name>
                            <value>$(EXPORT_DEBUG)</value>
                        </element>
                    </value>
                </property>
            </connection>

            <!-- This is the domain where samples are read from DDS -->
            <participant name="InputDomain">
                <domain_id>2</domain_id>
            </participant>
            
            <session>
                <!-- Use several threads to serve all the routes/Topics  -->
                <thread_pool>
                    <size>4</size>
                </thread_pool>

                <!--
                    Establish a simple DDS Topic -> OpenTelemetry mapping

                    This auto route creates a route for each new Topic, and will pass
                    all DDS data to OpenTelemetry
                 -->
                <auto_route name="TelemetryRoute">
                    <dds_input participant="InputDomain">                        
                        <allow_topic_name_filter>*</allow_topic_name_filter>
                        <allow_registered_type_name_filter>Metrics::Metric</allow_registered_type_name_filter>
                        <deny_topic_name_filter>rti/*</deny_topic_name_filter>
                    </dds_input>
                    <output connection="OpenTelemetryConnection">
                        <allow_stream_name_filter>*</allow_stream_name_filter>
                        <allow_registered_type_name_filter>*</allow_registered_type_name_filter>
                        <deny_stream_name_filter>rti/*</deny_stream_name_filter>
                    </output>
                </auto_route>
                
            </session>
        </domain_route>
    </routing_service>

</dds>